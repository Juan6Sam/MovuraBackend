// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Movura.Api.Data.Context;

#nullable disable

namespace Movura.Api.Migrations
{
    [DbContext(typeof(MovuraDbContext))]
    [Migration("20251001124242_AddRefreshTokensTable")]
    partial class AddRefreshTokensTable
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Movura.Api.Data.Entities.Acceso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_acceso");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("HoraEntrada")
                        .HasColumnType("datetime2")
                        .HasColumnName("hora_entrada");

                    b.Property<DateTime?>("HoraSalida")
                        .HasColumnType("datetime2")
                        .HasColumnName("hora_salida");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("id_estatus");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id");

                    b.HasIndex("HoraEntrada");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Accesos");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.CodigoQR", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_qr");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccesoId")
                        .HasColumnType("int")
                        .HasColumnName("id_acceso");

                    b.Property<Guid>("Codigo")
                        .HasColumnType("uniqueidentifier")
                        .HasColumnName("codigo");

                    b.Property<int?>("ComercioId")
                        .HasColumnType("int")
                        .HasColumnName("id_comercio");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion");

                    b.Property<DateTime>("FechaExpiracion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_expiracion");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("id_estatus");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id");

                    b.HasIndex("AccesoId");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.HasIndex("ComercioId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("CodigosQR");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Comercio", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParkingId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<string>("Tipo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("Valor")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("ParkingId");

                    b.HasIndex("StatusId");

                    b.ToTable("Comercios");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.ComercioEmail", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_rel");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("ComercioId")
                        .HasColumnType("int")
                        .HasColumnName("id_comercio");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("correo");

                    b.HasKey("Id");

                    b.HasIndex("ComercioId");

                    b.ToTable("ComercioEmails");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Contrasena", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_contrasena");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<bool>("Activa")
                        .HasColumnType("bit")
                        .HasColumnName("activa");

                    b.Property<DateTime>("FechaCreacion")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_creacion");

                    b.Property<string>("Hash")
                        .IsRequired()
                        .HasMaxLength(512)
                        .HasColumnType("nvarchar(512)")
                        .HasColumnName("hash");

                    b.Property<string>("Salt")
                        .IsRequired()
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)")
                        .HasColumnName("salt");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Contrasenas");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Exceso", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_exceso");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AccesoId")
                        .HasColumnType("int")
                        .HasColumnName("id_acceso");

                    b.Property<DateTime>("HoraFin")
                        .HasColumnType("datetime2")
                        .HasColumnName("hora_fin");

                    b.Property<DateTime>("HoraInicio")
                        .HasColumnType("datetime2")
                        .HasColumnName("hora_inicio");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("monto");

                    b.HasKey("Id");

                    b.HasIndex("AccesoId");

                    b.ToTable("Excesos");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Log", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_log");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Accion")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("accion");

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("descripcion");

                    b.Property<DateTime>("Fecha")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha");

                    b.Property<string>("IpAddress")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("ip_address");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Logs");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Marca", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_marca");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("Marcas");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Notificacion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_notificacion");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Canal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("canal");

                    b.Property<string>("EstatusEnvio")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("estatus_envio");

                    b.Property<DateTime>("FechaEnvio")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_envio");

                    b.Property<string>("Mensaje")
                        .IsRequired()
                        .HasMaxLength(1000)
                        .HasColumnType("nvarchar(1000)")
                        .HasColumnName("mensaje");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("Notificaciones");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Pago", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_pago");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccesoId")
                        .HasColumnType("int")
                        .HasColumnName("id_acceso");

                    b.Property<DateTime>("FechaPago")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_pago");

                    b.Property<string>("MetodoPago")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("metodo_pago");

                    b.Property<decimal>("Monto")
                        .HasColumnType("decimal(18,2)")
                        .HasColumnName("monto");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("id_estatus");

                    b.Property<int>("TicketId")
                        .HasColumnType("int")
                        .HasColumnName("id_ticket");

                    b.Property<int?>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id");

                    b.HasIndex("AccesoId");

                    b.HasIndex("FechaPago");

                    b.HasIndex("StatusId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("Pagos");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Parking", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("AdminCorreo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("AdminNombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("AltaISO")
                        .HasColumnType("datetime2");

                    b.Property<string>("Direccion")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Estatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Grupo")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Parkings");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.ParkingConfig", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("CostoFraccion")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("CostoHora")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("FraccionMin")
                        .HasColumnType("int");

                    b.Property<int>("GraciaMin")
                        .HasColumnType("int");

                    b.Property<string>("HoraCorte")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ParkingId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<decimal>("TarifaBase")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("TotalSpaces")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ParkingId")
                        .IsUnique();

                    b.ToTable("ParkingConfigs");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.RefreshToken", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("CreatedByIp")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2");

                    b.Property<string>("ReplacedByToken")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime?>("Revoked")
                        .HasColumnType("datetime2");

                    b.Property<string>("RevokedByIp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Role", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_rol");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Status", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_estatus");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Descripcion")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("descripcion");

                    b.Property<string>("Modulo")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("modulo");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("nombre");

                    b.HasKey("Id");

                    b.ToTable("Estatus");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Tarjeta", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_tarjeta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Expiracion")
                        .IsRequired()
                        .HasMaxLength(7)
                        .HasColumnType("nvarchar(7)")
                        .HasColumnName("expiracion");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_registro");

                    b.Property<string>("Marca")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("marca");

                    b.Property<int?>("MarcaId")
                        .HasColumnType("int");

                    b.Property<string>("NumeroEnmascarado")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("numero_enmascarado");

                    b.Property<string>("TokenSeguro")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)")
                        .HasColumnName("token_seguro");

                    b.Property<int>("UserId")
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    b.HasKey("Id");

                    b.HasIndex("MarcaId");

                    b.HasIndex("UserId");

                    b.ToTable("Tarjetas");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccesoId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EntryTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ExitTime")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaEmision")
                        .HasColumnType("datetime2");

                    b.Property<string>("ParkingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Plate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccesoId");

                    b.HasIndex("FechaEmision");

                    b.HasIndex("ParkingId");

                    b.HasIndex("StatusId");

                    b.HasIndex("UserId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Transaccion", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AccesoId")
                        .HasColumnType("int");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ComercioId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<decimal>("DiscountAmount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("PagoId")
                        .HasColumnType("int");

                    b.Property<string>("ParkingId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("PaymentMethod")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("QRId")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<int?>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("AccesoId");

                    b.HasIndex("ComercioId");

                    b.HasIndex("CreatedAt");

                    b.HasIndex("PagoId");

                    b.HasIndex("ParkingId");

                    b.HasIndex("QRId");

                    b.HasIndex("StatusId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UserId");

                    b.ToTable("Transacciones");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_usuario");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Apellido")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("apellido");

                    b.Property<int?>("ComercioId")
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasColumnName("correo");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2")
                        .HasColumnName("fecha_registro");

                    b.Property<bool>("FirstLogin")
                        .HasColumnType("bit")
                        .HasColumnName("first_login");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)")
                        .HasColumnName("nombre");

                    b.Property<int>("RoleId")
                        .HasColumnType("int")
                        .HasColumnName("id_rol");

                    b.Property<int>("StatusId")
                        .HasColumnType("int")
                        .HasColumnName("id_estatus");

                    b.Property<string>("Telefono")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasColumnName("telefono");

                    b.HasKey("Id");

                    b.HasIndex("ComercioId");

                    b.HasIndex("Email")
                        .IsUnique();

                    b.HasIndex("RoleId");

                    b.HasIndex("StatusId");

                    b.ToTable("Usuarios");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Acceso", b =>
                {
                    b.HasOne("Movura.Api.Data.Entities.Status", "Status")
                        .WithMany("Accesos")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movura.Api.Data.Entities.User", "User")
                        .WithMany("Accesos")
                        .HasForeignKey("UserId");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.CodigoQR", b =>
                {
                    b.HasOne("Movura.Api.Data.Entities.Acceso", "Acceso")
                        .WithMany("CodigosQR")
                        .HasForeignKey("AccesoId");

                    b.HasOne("Movura.Api.Data.Entities.Comercio", "Comercio")
                        .WithMany("CodigosQR")
                        .HasForeignKey("ComercioId");

                    b.HasOne("Movura.Api.Data.Entities.Status", "Status")
                        .WithMany("CodigosQR")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movura.Api.Data.Entities.User", "User")
                        .WithMany("CodigosQR")
                        .HasForeignKey("UserId");

                    b.Navigation("Acceso");

                    b.Navigation("Comercio");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Comercio", b =>
                {
                    b.HasOne("Movura.Api.Data.Entities.Parking", "Parking")
                        .WithMany("Comercios")
                        .HasForeignKey("ParkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movura.Api.Data.Entities.Status", "Status")
                        .WithMany("Comercios")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parking");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.ComercioEmail", b =>
                {
                    b.HasOne("Movura.Api.Data.Entities.Comercio", "Comercio")
                        .WithMany("Emails")
                        .HasForeignKey("ComercioId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Comercio");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Contrasena", b =>
                {
                    b.HasOne("Movura.Api.Data.Entities.User", "User")
                        .WithMany("Contrasenas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Exceso", b =>
                {
                    b.HasOne("Movura.Api.Data.Entities.Acceso", "Acceso")
                        .WithMany("Excesos")
                        .HasForeignKey("AccesoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Acceso");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Log", b =>
                {
                    b.HasOne("Movura.Api.Data.Entities.User", "User")
                        .WithMany("Logs")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Notificacion", b =>
                {
                    b.HasOne("Movura.Api.Data.Entities.User", "User")
                        .WithMany("Notificaciones")
                        .HasForeignKey("UserId");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Pago", b =>
                {
                    b.HasOne("Movura.Api.Data.Entities.Acceso", "Acceso")
                        .WithMany("Pagos")
                        .HasForeignKey("AccesoId");

                    b.HasOne("Movura.Api.Data.Entities.Status", "Status")
                        .WithMany("Pagos")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movura.Api.Data.Entities.Ticket", "Ticket")
                        .WithMany("Pagos")
                        .HasForeignKey("TicketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movura.Api.Data.Entities.User", "User")
                        .WithMany("Pagos")
                        .HasForeignKey("UserId");

                    b.Navigation("Acceso");

                    b.Navigation("Status");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.ParkingConfig", b =>
                {
                    b.HasOne("Movura.Api.Data.Entities.Parking", "Parking")
                        .WithOne("Config")
                        .HasForeignKey("Movura.Api.Data.Entities.ParkingConfig", "ParkingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Parking");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.RefreshToken", b =>
                {
                    b.HasOne("Movura.Api.Data.Entities.User", "User")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Tarjeta", b =>
                {
                    b.HasOne("Movura.Api.Data.Entities.Marca", null)
                        .WithMany("Tarjetas")
                        .HasForeignKey("MarcaId");

                    b.HasOne("Movura.Api.Data.Entities.User", "User")
                        .WithMany("Tarjetas")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Ticket", b =>
                {
                    b.HasOne("Movura.Api.Data.Entities.Acceso", "Acceso")
                        .WithMany("Tickets")
                        .HasForeignKey("AccesoId");

                    b.HasOne("Movura.Api.Data.Entities.Parking", "Parking")
                        .WithMany()
                        .HasForeignKey("ParkingId");

                    b.HasOne("Movura.Api.Data.Entities.Status", "Status")
                        .WithMany("Tickets")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movura.Api.Data.Entities.User", "User")
                        .WithMany("Tickets")
                        .HasForeignKey("UserId");

                    b.Navigation("Acceso");

                    b.Navigation("Parking");

                    b.Navigation("Status");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Transaccion", b =>
                {
                    b.HasOne("Movura.Api.Data.Entities.Acceso", "Acceso")
                        .WithMany("Transacciones")
                        .HasForeignKey("AccesoId");

                    b.HasOne("Movura.Api.Data.Entities.Comercio", "Comercio")
                        .WithMany()
                        .HasForeignKey("ComercioId");

                    b.HasOne("Movura.Api.Data.Entities.Pago", "Pago")
                        .WithMany("Transacciones")
                        .HasForeignKey("PagoId");

                    b.HasOne("Movura.Api.Data.Entities.Parking", "Parking")
                        .WithMany()
                        .HasForeignKey("ParkingId");

                    b.HasOne("Movura.Api.Data.Entities.CodigoQR", "CodigoQR")
                        .WithMany("Transacciones")
                        .HasForeignKey("QRId");

                    b.HasOne("Movura.Api.Data.Entities.Status", "Status")
                        .WithMany("Transacciones")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movura.Api.Data.Entities.Ticket", "Ticket")
                        .WithMany()
                        .HasForeignKey("TicketId");

                    b.HasOne("Movura.Api.Data.Entities.User", "User")
                        .WithMany("Transacciones")
                        .HasForeignKey("UserId");

                    b.Navigation("Acceso");

                    b.Navigation("CodigoQR");

                    b.Navigation("Comercio");

                    b.Navigation("Pago");

                    b.Navigation("Parking");

                    b.Navigation("Status");

                    b.Navigation("Ticket");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.User", b =>
                {
                    b.HasOne("Movura.Api.Data.Entities.Comercio", null)
                        .WithMany("Usuarios")
                        .HasForeignKey("ComercioId");

                    b.HasOne("Movura.Api.Data.Entities.Role", "Role")
                        .WithMany("Users")
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Movura.Api.Data.Entities.Status", "Status")
                        .WithMany("Users")
                        .HasForeignKey("StatusId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Role");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Acceso", b =>
                {
                    b.Navigation("CodigosQR");

                    b.Navigation("Excesos");

                    b.Navigation("Pagos");

                    b.Navigation("Tickets");

                    b.Navigation("Transacciones");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.CodigoQR", b =>
                {
                    b.Navigation("Transacciones");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Comercio", b =>
                {
                    b.Navigation("CodigosQR");

                    b.Navigation("Emails");

                    b.Navigation("Usuarios");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Marca", b =>
                {
                    b.Navigation("Tarjetas");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Pago", b =>
                {
                    b.Navigation("Transacciones");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Parking", b =>
                {
                    b.Navigation("Comercios");

                    b.Navigation("Config")
                        .IsRequired();
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Status", b =>
                {
                    b.Navigation("Accesos");

                    b.Navigation("CodigosQR");

                    b.Navigation("Comercios");

                    b.Navigation("Pagos");

                    b.Navigation("Tickets");

                    b.Navigation("Transacciones");

                    b.Navigation("Users");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.Ticket", b =>
                {
                    b.Navigation("Pagos");
                });

            modelBuilder.Entity("Movura.Api.Data.Entities.User", b =>
                {
                    b.Navigation("Accesos");

                    b.Navigation("CodigosQR");

                    b.Navigation("Contrasenas");

                    b.Navigation("Logs");

                    b.Navigation("Notificaciones");

                    b.Navigation("Pagos");

                    b.Navigation("RefreshTokens");

                    b.Navigation("Tarjetas");

                    b.Navigation("Tickets");

                    b.Navigation("Transacciones");
                });
#pragma warning restore 612, 618
        }
    }
}
